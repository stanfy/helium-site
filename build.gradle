buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'  }
    mavenCentral()
  }

  dependencies {
    classpath 'com.stanfy.helium:gradle-plugin:0.8.1-SNAPSHOT'
    classpath 'com.google.appengine:gradle-appengine-plugin:1.9.30'
  }
}

apply plugin: 'helium'
apply plugin: 'war'
apply plugin: 'appengine'

repositories {
  mavenCentral()
  ivy {
    //noinspection GroovyAssignabilityCheck
    url 'https://github.com'
    layout 'pattern', {
      //noinspection GroovyAssignabilityCheck
      artifact '[organization]/[module]/archive/v[revision](.[ext])'
    }
  }
}

configurations { swaggerUi }

def swaggerUiVersion = '2.1.4'
def appEngineVersion = '1.9.32'

dependencies {
  appengineSdk "com.google.appengine:appengine-java-sdk:${appEngineVersion}"
  compile "com.google.appengine:appengine-api-1.0-sdk:${appEngineVersion}"
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile 'com.google.code.gson:gson:1.7.2'
  compile 'javax.servlet:javax.servlet-api:3.0.1'
  compile 'com.googlecode.objectify:objectify:5.1.10'

  swaggerUi "swagger-api:swagger-ui:${swaggerUiVersion}@zip"
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

ext {
  // Distinguish development end CloudEngine endpoints.
  if (project.hasProperty('endpoint')) {
    if (!project.endpoint.startsWith('http')) {
      throw new GradleException("Bad endpoint name '$endpoint'. Should start with 'http://...'")
    }
  } else {
    endpoint = 'http://localhost:8080'
  }
}

appengine {

  downloadSdk = true
  jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000']

  appcfg {
    oauth2 = true
  }

  app {
    id = 'helium-1222'
  }

  update {
    useJava7 = true
  }

  logs {
    severity = 0
    outputFile = file('debugLogs.txt')
  }
}

////// Hellium api and code generation scope. //////
import com.stanfy.helium.handler.codegen.java.constants.ConstantNameConverter

import javax.lang.model.element.Modifier

helium {
  specification file('src/api/public.api')

  sourceGen {
    def sourceOut = file("src/generated")

    entities {
      output = file("$sourceOut")

      options {
        packageName = 'com.stanfy.hellium.server.api.data'

        prettifyNames = true
        fieldModifiers = [Modifier.PRIVATE] as Set
        addGetters = true
        addSetters = true
      }
    }

    constants {
      output = file("$sourceOut")

      options {
        packageName = 'com.stanfy.hellium.server.api.constants'
        nameConverter = {
          "COLUMN_${it.canonicalName.toUpperCase(Locale.US)}".toString()
        } as ConstantNameConverter
      }
    }

    retrofit {
      output = file("$sourceOut")

      options {
        packageName = "com.stanfy.hellium.server.api"
      }
    }
  }

  variables {
    endpointLocation project.endpoint
  }
}

task unpackSwaggerUi() {
  ext.data = configurations.swaggerUi.first()
  ext.dest = file("$buildDir/tmp/swagger-ui")
  inputs.file data
  outputs.dir dest
  doLast {
    copy {
      from zipTree(data)
      into dest
    }
  }
}

// Add swagger spec to the war.
afterEvaluate {
  war {
    dependsOn generateSwaggerSpec, unpackSwaggerUi
    from file("$unpackSwaggerUi.dest/swagger-ui-$swaggerUiVersion/dist"), {
      into 'spec/ui'
    }
    from file("$generateSwaggerSpec.output"), {
      into 'spec'
      rename '.+\\.json', 'public.json'
    }
  }
}
